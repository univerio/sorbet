digraph "normalize_params.rb" {
subgraph "cluster_::Test#normalize_params" {
    label = "::Test#normalize_params";
    color = blue;
    "bb::Test#normalize_params_0" [shape = invhouse];
    "bb::Test#normalize_params_1" [shape = parallelogram];

    "bb::Test#normalize_params_0" [
        label = "block[id=0]()\l<self>: Test = cast(<self>: NilClass, Test);\lv: T.untyped = load_arg(v)\l<statTemp>$5: T.class_of(Hash) = alias <C Hash>\l<ifTemp>$3: T.untyped = v: T.untyped.is_a?(<statTemp>$5: T.class_of(Hash))\l<ifTemp>$3: T.untyped\l"
    ];

    "bb::Test#normalize_params_0" -> "bb::Test#normalize_params_2" [style="bold"];
    "bb::Test#normalize_params_0" -> "bb::Test#normalize_params_3" [style="tapered"];

    "bb::Test#normalize_params_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_1" -> "bb::Test#normalize_params_1" [style="bold"];
    "bb::Test#normalize_params_2" [
        label = "block[id=2](<self>: Test, v: T::Hash[T.untyped, T.untyped])\l<statTemp>$8: T::Array[[T.untyped, T.untyped]] = v: T::Hash[T.untyped, T.untyped].to_a()\l<statTemp>$6: T.untyped = <self>: Test.normalize_params(<statTemp>$8: T::Array[[T.untyped, T.untyped]])\l<returnMethodTemp>$2: T.untyped = <statTemp>$6: T.untyped.sort()\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_2" -> "bb::Test#normalize_params_11" [style="bold"];
    "bb::Test#normalize_params_3" [
        label = "block[id=3](<self>: Test, v: T.untyped)\l<statTemp>$12: T.class_of(Array) = alias <C Array>\l<ifTemp>$10: T.untyped = v: T.untyped.is_a?(<statTemp>$12: T.class_of(Array))\l<ifTemp>$10: T.untyped\l"
    ];

    "bb::Test#normalize_params_3" -> "bb::Test#normalize_params_4" [style="bold"];
    "bb::Test#normalize_params_3" -> "bb::Test#normalize_params_5" [style="tapered"];

    "bb::Test#normalize_params_4" [
        label = "block[id=4](<self>: Test, v: T::Array[T.untyped])\l<block-pre-call-temp>$14: Sorbet::Private::Static::Void = v: T::Array[T.untyped].map()\l<selfRestore>$15: Test = <self>\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_4" -> "bb::Test#normalize_params_6" [style="bold"];
    "bb::Test#normalize_params_5" [
        label = "block[id=5](v: T.untyped)\l<returnMethodTemp>$2: T.untyped = v\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_5" -> "bb::Test#normalize_params_11" [style="bold"];
    "bb::Test#normalize_params_6" [
        label = "block[id=6](<self>: Test, <selfRestore>$15: Test)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Test#normalize_params_6" -> "bb::Test#normalize_params_9" [style="bold"];
    "bb::Test#normalize_params_6" -> "bb::Test#normalize_params_7" [style="tapered"];

    "bb::Test#normalize_params_7" [
        label = "block[id=7](<selfRestore>$15: Test)\l<returnMethodTemp>$2: T::Array[T.untyped] = Solve<map>\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_7" -> "bb::Test#normalize_params_11" [style="bold"];
    "bb::Test#normalize_params_9" [
        label = "block[id=9](<self>: Test, <selfRestore>$15: Test)\louterLoops: 1\l<self>: Test = loadSelf\l<blk>$16: [T.untyped] = load_yield_params(map)\l<blk>$17: Integer(0) = 0\le$1: T.untyped = <blk>$16: [T.untyped].[](<blk>$17: Integer(0))\l<blockReturnTemp>$18: T.untyped = <self>: Test.normalize_params(e$1: T.untyped)\l<blockReturnTemp>$21: T.noreturn = blockreturn<map> <blockReturnTemp>$18: T.untyped\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_9" -> "bb::Test#normalize_params_6" [style="bold"];
    "bb::Test#normalize_params_11" [
        label = "block[id=11](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_11" -> "bb::Test#normalize_params_1" [style="bold"];
}

}

